tab_title: CSE Self-Placement Quiz
page_title: Welcome to the UCSD CSE Self-Placement Quiz
page_description: "This is the self-placement page for the CSE department at UCSD. Take the following survey to determine which CSE courses you should take next quarter: CSE 6R, CSE 8A, or CSE 11. Inspired by the CSE 12X Self-Placement survey created by the CS department at University of Washington!"
root_question_variable: taken_previous_course

question_text_variables:
  coding_question_output_text: "Read and work on this problem, then answer the next question: What is the output after executing the following code?"
  coding_question_describe_text: "Read and work on this problem, then answer the next question: In one or two short sentences, describe what the following code does."
  topic_familiarity_question_text: "How familiar and comfortable are you with each of the following programming topics/constructs?"

question_variables:
  taken_previous_course: # question variable name, can be anything, but must be unique
    question_text: "Have you taken a previous computer science course?" # question_text, either this or "question_text_variable" field is required
    answers:
      - answer_text: "Yes" # answer_text, required field
        question_variable: "previous_course" # next question to ask
      - answer_text: "No"
        question_variable: "previous_experience"

  previous_experience:
    question_text: "Do you have previous programming experience outside of a course?"
    answers:
      - answer_text: "Yes"
        question_variable: "topic_familiarity"
      - answer_text: "No"
        outcome: "CSE 121"

  previous_course:
    question_text: "What is the most recent computer science course you have completed?"
    answers:
      - answer_text: "CSE 142 (at UW, UW in the High School, or a community college)"
        question_variable: "cse_142_grade"
      - answer_text: "Advanced Placement (AP) Computer Science A"
        question_variable: "ap_score"
      - answer_text: "Advanced Placement (AP) Computer Science Principles"
        question_variable: "topic_familiarity"
      - answer_text: "International Baccalaureate (IB) Computer Science - Standard Level (SL)"
        question_variable: "ib_score"
      - answer_text: "International Baccalaureate (IB) Computer Science - Higher Level (HL)"
        question_variable: "ib_score"
      - answer_text: "Exploring Computer Science"
        question_variable: "topic_familiarity"
      - answer_text: "Other"
        question_variable: "topic_familiarity"

  cse_142_grade:
    question_text: "What was your grade in CSE 142?"
    answers:
      - answer_text: "0.0-0.9"
        outcome: "Talk to Advising"
      - answer_text: "1.0-1.9"
        outcome: "Talk to Advising"
      - answer_text: "2.0-2.9"
        question_variable: "topic_familiarity"
      - answer_text: "3.0-4.0"
        question_variable: "topic_familiarity"
      - answer_text: "S"
        question_variable: "topic_familiarity"
      - answer_text: "NS"
        outcome: "Talk to Advising"
      - answer_text: "I do not have a grade in CSE 142"
        outcome: "Talk to Advising"

  ap_score:
    question_text: "What was your score on the AP Computer Science A exam?"
    answers:
      - answer_text: "1"
        outcome: "Talk to Advising"
      - answer_text: "2"
        outcome: "Talk to Advising"
      - answer_text: "3"
        question_variable: "topic_familiarity"
      - answer_text: "4"  
        question_variable: "topic_familiarity"
      - answer_text: "5"
        question_variable: "topic_familiarity"
      - answer_text: "I did not take the exam or do not have a score"
        question_variable: "topic_familiarity"

  ib_score:
    question_text: "What was your score on the IB Computer Science exam?"
    answers:
      - answer_text: "1"
        outcome: "Talk to Advising"
      - answer_text: "2"
        outcome: "Talk to Advising"
      - answer_text: "3"
        outcome: "Talk to Advising"
      - answer_text: "4"
        question_variable: "topic_familiarity"
      - answer_text: "5"
        question_variable: "topic_familiarity"
      - answer_text: "6"
        question_variable: "topic_familiarity"
      - answer_text: "7"
        question_variable: "topic_familiarity"
      - answer_text: "I did not take the exam or do not have a score"
        question_variable: "topic_familiarity"

  topic_familiarity:
    question_text_variable: topic_familiarity_question_text # just like a regular question, either this or "question_text" field is required
    subquestions: # instead of answers, we have subquestions
      - question_text: "Variables and assignment statements" # either this or "question_text_variable" field is required
        subquestion_label: "variables" # subquestion_label, the key of the subquestion dictionary used in logic, must be unique for each subquestion
        answers_variable: familiarity # either this or "answers" field is required 
      - question_text: "Data types (e.g., int, double, String, char)"
        subquestion_label: "data_types"
        answers_variable: familiarity
      - question_text: "Functions and/or methods"
        subquestion_label: "functions"
        answers_variable: familiarity
      - question_text: "Loops"
        subquestion_label: "loops"
        answers_variable: familiarity
      - question_text: "Conditionals (e.g., if, else)"
        subquestion_label: "conditionals"
        answers_variable: familiarity
      - question_text: "Arrays and/or lists"
        subquestion_label: "arrays"
        answers_variable: familiarity
    subquestions_logic: | # logic to determine the next question or outcome based on the subquestions, python code
      if 1 in subquestions.values() or 2 in subquestions.values() or 3 in subquestions.values():
        return {"outcome": "CSE 121"}
      else:
        return {"question_variable": "coding_question_1"}

  coding_question_1:
    question_text_variable: coding_question_output_text
    coding_question_label: "Coding Question 1"
    code:
      python: |
        def figure(max_num):
            for line in range(1, max_num + 1):
                for dots in range(1, max_num - line + 1):
                    print(".", end="")
                print(line)

        figure(8)

      java: |
        public class Example {
            public static void main(String[] args) {
                figure(8);
            }

            public static void figure(int max) {
                for (int line = 1; line <= max; line++) {
                    for (int dots = 1; dots <= -1 * line + max; dots++) {
                        System.out.print(".");
                    }
                    System.out.println(line);
                }
            }
        }

      solution: | # note that no actual checking is done against the solution, this is just for display purposes
        .......1
        ......2
        .....3
        ....4
        ...5
        ..6
        .7
        8

    answers_variable: coding_question_performance
    answer_logic: | # note that this can be used in a non-coding question as well
      if answer == 1 or answer == 2:
        return {"outcome": "CSE 121"}
      elif answer == 3:
        return {"outcome": "Talk to Advising"}
      elif answer == 4 or answer == 5:
        return {"question_variable": "coding_question_2"}

  coding_question_2:
    question_text_variable: coding_question_output_text
    coding_question_label: "Coding Question 2"
    code:
      python: |
        def mystery(x, values):
            for el in values:
                if len(el) < x:
                    return True
            return False


        values = ["hello", "banana", "lime", "lemon", "apple", "strawberry", "grape"]
        mystery1 = mystery(3, values)
        print("Mystery 1:", mystery1)
        mystery2 = mystery(5, values)
        print("Mystery 2:", mystery2)

      java: |
        public class Example {
            public static void main(String[] args) {
                String[] list = {"hello", "banana", "lime", "lemon", "apple", "strawberry", "grape"};
                boolean mystery1 = mystery(3, list);
                System.out.println("Mystery 1: " + mystery1);
                boolean mystery2 = mystery(5, list);
                System.out.println("Mystery 2: " + mystery2);
            }

            public static boolean mystery(int x, String[] list) {
                for (int i = 0; i < list.length; i++) {
                    if (list[i].length() < x) {
                        return true;
                    }
                }
                return false;
            }
        }

      solution: |
        Mystery 1: false
        Mystery 2: true

    answers_variable: coding_question_performance
    answer_logic: |
      if answer == 1 or answer == 2:
        return {"outcome": "CSE 121"}
      elif answer == 3:
        return {"outcome": "Talk to Advising"}
      elif answer == 4 or answer == 5:
        return {"question_variable": "coding_question_3"}

  coding_question_3:
    question_text_variable: coding_question_describe_text
    coding_question_label: "Coding Question 3"
    code:
      python: |
        def input_loop():
            total_chars = 0;
            sentinel = "quit";
            prompt = 'Type a word (or "' + sentinel +'" to quit): '
            word = input(prompt)
            while word != sentinel:
                total_chars += len(word)
                word = input(prompt)
            print("The total number of characters is:", total_chars)

        input_loop()

      java: |
        import java.util.*;

        public class Example {
            public static void main(String[] args) {
                inputLoop();
            }

            public static void inputLoop() {
                Scanner console = new Scanner(System.in);
                int totalChars = 0;
                String sentinel = "quit";
                System.out.print("Type a word (or \"" + sentinel + "\" to quit): ");
                String word = console.next();
                while (!word.equals(sentinel)) {
                    totalChars += word.length();
                    System.out.print("Type a word (or \"" + sentinel + "\" to quit): ");
                    word = console.next();
                }
                System.out.println("The total number of characters is: " + totalChars);
            }
        }

      solution: Reads in input from the user one word at a time until the word "quit" is entered, then prints the total number of characters entered (not including the word "quit").

    answers_variable: coding_question_performance
    answer_logic: |
      if answer == 1 or answer == 2:
        return {"outcome": "CSE 121"}
      elif answer == 3:
        return {"outcome": "Talk to Advising"}
      elif answer == 4 or answer == 5:
        return {"question_variable": "topic_familiarity_advanced"}

  topic_familiarity_advanced:
    question_text_variable: topic_familiarity_question_text
    subquestions:
      - question_text: "Console and/or file input and output"
        subquestion_label: "console_file_io"
        answers_variable: familiarity
      - question_text: "Maps and/or dictionaries"
        subquestion_label: "maps_dictionaries"
        answers_variable: familiarity
      - question_text: "Defining classes"
        subquestion_label: "classes"
        answers_variable: familiarity
      - question_text: "Defining constructors"
        subquestion_label: "constructors"
        answers_variable: familiarity
      - question_text: "Interfaces"
        subquestion_label: "interfaces"
        answers_variable: familiarity

    subquestions_logic: |
      if 1 in subquestions.values() or 2 in subquestions.values() or 3 in subquestions.values():
        return {"outcome": "CSE 122"}
      else:
        return {"question_variable": "coding_question_4"}

  coding_question_4:
    question_text_variable: coding_question_describe_text
    code:
      python: |
        def mystery(dict1):
            dict2 = {}
            for key in dict1:
                set2 = set()
                set1 = dict1[key]
                for n in set1:
                    set2.add(n)
                dict2[key] = set2
            return dict2

      java: |
        import java.util.*;

        public class Example {
            public static void main(String[] args) {
                inputLoop();
            }

            public static void inputLoop() {
                Scanner console = new Scanner(System.in);
                int totalChars = 0;
                String sentinel = "quit";
                System.out.print("Type a word (or \"" + sentinel + "\" to quit): ");
                String word = console.next();
                while (!word.equals(sentinel)) {
                    totalChars += word.length();
                    System.out.print("Type a word (or \"" + sentinel + "\" to quit): ");
                    word = console.next();
                }
                System.out.println("The total number of characters is: " + totalChars);
            }
        }

      solution: Reads in input from the user one word at a time until the word "quit" is entered, then prints the total number of characters entered (not including the word "quit").

    answers_variable: coding_question_performance
    answer_logic: |
      if answer == 1 or answer == 2:
        return {"outcome": "CSE 122"}
      elif answer == 3:
        return {"outcome": "Talk to Advising"}
      elif answer == 4 or answer == 5:
        return {"question_variable": "coding_question_5"}

  coding_question_5:
    question_text_variable: coding_question_output_text
    code:
      java: |
        class CreditCard {
            private String cardNumber;
            private String name;
            private double creditLimit;
            private double balance;
            private int totalCharges;

            public CreditCard(String name, String cardNumber, double creditLimit) {
                this.cardNumber = cardNumber;
                this.name = name;
                this.creditLimit = creditLimit;
                this.balance = 0;
                this.totalCharges = 0;
            }

            public void charge(double amount) {
                if (balance + amount > creditLimit) {
                    throw new IllegalArgumentException("Beyond Credit Limit");
                }

                balance += amount;
                totalCharges++;
            }

            public void payBill(double amount) {
                balance -= amount;
            }

            public String getPaymentType() {
                return "CC";
            }

            public int totalPayments() {
                return totalCharges;
            }

            public String toString() {
                return getPaymentType() + " " + cardNumber + " (" + balance + ")";
            }
        }

        public class Example5 {
            public static void main(String[] args) {
                CreditCard card1 = new CreditCard("Brett Wortzman", "1234567801019275", 1000);
                CreditCard card2 = new CreditCard("Zorah Fung", "9876543210108473", 500);

                card1.charge(325);
                card1.charge(400);
                card1.payBill(200);

                card2.charge(175);
                card2.payBill(50);
                card2.charge(75);
                card2.charge(100);

                System.out.println("Payment Method 1: " + card1);
                System.out.println("Payment Method 2: " + card2);

                System.out.println("Payment Method 1 charges: " + card1.totalPayments());
                System.out.println("Payment Method 2 charges: " + card2.totalPayments());
            }
        }

      solution: |
        Payment Method 1: CC 1234567801019275 (525.0)
        Payment Method 2: CC 9876543210108473 (300.0)
        Payment Method 1 charges: 2
        Payment Method 2 charges: 3

    answers_variable: coding_question_performance
    answer_logic: |
      if answer == 1 or answer == 2:
        return {"outcome": "CSE 122"}
      elif answer == 3:
        return {"outcome": "Talk to Advising"}
      elif answer == 4 or answer == 5:
        return {"question_variable": "coding_question_6"}

  coding_question_6:
    question_text_variable: coding_question_output_text
    code:
      java: |
        class CreditCard implements PaymentMethod {
            private String cardNumber;
            private String name;
            private double creditLimit;
            private double balance;
            private int totalCharges;

            public CreditCard(String name, String cardNumber, double creditLimit) {
                this.cardNumber = cardNumber;
                this.name = name;
                this.creditLimit = creditLimit;
                this.balance = 0;
                this.totalCharges = 0;
            }

            public void charge(double amount) {
                if (balance + amount > creditLimit) {
                    throw new IllegalArgumentException("Beyond Credit Limit");
                }

                balance += amount;
                totalCharges++;
            }

            public void payBill(double amount) {
                balance -= amount;
            }

            public String getPaymentType() {
                return "CC";
            }

            public int totalPayments() {
                return totalCharges;
            }

            public String toString() {
                return getPaymentType() + " " + cardNumber + " (" + balance + ")";
            }
        }

        class BankAccount implements PaymentMethod {
            private String number;
            private String name;
            private double balance;
            private int withdrawals;

            public BankAccount(String name, String number, int initialDeposit) {
                this.name = name;
                this.number = number;
                this.balance = initialDeposit;
                this.withdrawals = 0;
            }

            public void charge(double amount) {
                if (amount > balance) {
                    throw new IllegalArgumentException("Insufficient Funds");
                }

                balance -= amount;
                withdrawals++;
            }

            public void deposit(double amount) {
                balance += amount;
            }

            public String getPaymentType() {
                return "BankAccount";
            }

            public int totalPayments() {
                return withdrawals;
            }

            public String toString() {
                return getPaymentType() + " " + number + " (" + balance + ")";
            }
        }

        interface PaymentMethod {
            public void charge(double amount);

            public String getPaymentType();

            public int totalPayments();
        }

        public class Example6 {
            public static void main(String[] args) {
                CreditCard card1 = new CreditCard("Brett Wortzman", "1234567801019275", 1000);
                PaymentMethod method2 = new CreditCard("Zorah Fung", "9876543210108473", 500);
                PaymentMethod method3 = new BankAccount("Dubs", "1000000123467", 600);

                card1.charge(325);
                card1.charge(400);
                card1.payBill(200);

                method2.charge(175);
                method2.charge(75);
                method2.charge(100);

                method3.charge(150);

                System.out.println("Payment Method 1: " + card1);
                System.out.println("Payment Method 2: " + method2);
                System.out.println("Payment Method 3: " + method3);

                System.out.println("Payment Method 1 charges: " + card1.totalPayments());
                System.out.println("Payment Method 2 charges: " + method2.totalPayments());
                System.out.println("Payment Method 3 charges: " + method3.totalPayments());
            }
        }

      solution: |
        Payment Method 1: CC 1234567801019275 (525.0)
        Payment Method 2: CC 9876543210108473 (350.0)
        Payment Method 3: BankAccount 1000000123467 (450.0)
        Payment Method 1 charges: 2
        Payment Method 2 charges: 3
        Payment Method 3 charges: 1

    answers_variable: coding_question_performance
    answer_logic: |
      if answer == 1 or answer == 2:
        return {"outcome": "CSE 122"}
      elif answer == 3:
        return {"outcome": "Talk to Advising"}
      elif answer == 4 or answer == 5:
        return {"outcome": "CSE 123"}

answer_text_variables:
  familiarity:
    - answer_text: "I have never heard of this."
      answer_label: 1
    - answer_text: "I have heard of this but don't know what it is or don't understand it."
      answer_label: 2
    - answer_text: "I know what this is but I am not comfortable using it in programming."
      answer_label: 3
    - answer_text: "I am somewhat comfortable using this in programming."
      answer_label: 4
    - answer_text: "I am entirely comfortable using this in programming."
      answer_label: 5

  coding_question_performance:
    - answer_text: "I did not understand the problem or did not know how to begin solving it."
      answer_label: 1
    - answer_text: "I was able to begin solving the problem but got stuck."
      answer_label: 2
    - answer_text: "I was able to complete the problem but struggled greatly."
      answer_label: 3
    - answer_text: "I was able to solve the problem with a little difficulty."
      answer_label: 4
    - answer_text: "I was able to solve the problem with no difficulty."
      answer_label: 5

outcomes:
  - outcome_text: "CSE 121"
    outcome_description: >
      Since you don't have any previous programming experience, we recommend you take CSE 121. This course will start from the very beginning and will help you learn basic programming skills along with other students with limited experience.
      If you're more interested in using programming as a tool for data analysis and visualization, you might also want to consider CSE 160. This course also does not require any previous experience and focuses on using programming in Python to solve problems using data sets drawn from the sciences, engineering, business and the humanities.
      You can learn more about all of our introductory course options on the Allen School website. If you have any more questions, feel free to reach out to our course placement advising team.
  - outcome_text: "CSE 122"
    outcome_description: >
      You seem to have a solid grasp of the basics, so we recommend you take CSE 122. This course will help you take the next step with your programming skills and learn to apply the concepts you already know in new and exciting ways. 
      CSE 122 is taught in Java, but is designed for students with a wide range of previous experiences, so you should feel confident enrolling even if your experience is in another programming language.
      You can learn more about all of our introductory course options on the Allen School website. If you have any more questions, feel free to reach out to our course placement advising team.
  - outcome_text: "CSE 123"
    outcome_description: >
      You have a lot of experience programming and have a strong understanding of some more advanced topics, so we recommend you take CSE 123. This course will teach you to use your existing programming skills to implement and manipulate complex data structures, and will also introduce some more advanced programming concepts. 
      If you're more interested in using programming as a tool for data analysis and visualization, you might also want to consider CSE 163. This course builds on previous programming experience similarly to CSE 123, but with a focus on writing programs that manipulate and analyze different types of datasets. 
      CSE 163 is taught in Python, but is designed to help students who have previously programmed in Java adapt, so you should feel confident enrolling even if you've never used Python before.
      You can learn more about all of our introductory course options on the Allen School website. If you have any more questions, feel free to reach out to our course placement advising team.
  - outcome_text: "Talk to Advising"
    outcome_description: >
      Based on your responses, there are multiple courses that might be a good fit for you. We recommend you speak with a member of course placement advising team so they can learn more about your situation and help you find the best fit.
      You can learn more about all of our introductory course options on the Allen School website. If you have any more questions, feel free to reach out to our course placement advising team.
